#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

sem_t rw_mutex; // Semáforo para acesso ao recurso
sem_t mutex;    // Semáforo para acesso à contagem de leitores
int read_count = 0;

void *reader(void *param) {
    int id = *((int *)param);
    while (1) {
        sem_wait(&mutex);
        read_count++;
        if (read_count == 1) {
            sem_wait(&rw_mutex);
        }
        sem_post(&mutex);

        // Lendo dados
        printf("Leitor %d está lendo\n", id);
        sleep(1);

        sem_wait(&mutex);
        read_count--;
        if (read_count == 0) {
            sem_post(&rw_mutex);
        }
        sem_post(&mutex);

        sleep(1);
    }
    return NULL;
}

void *writer(void *param) {
    int id = *((int *)param);
    while (1) {
        sem_wait(&rw_mutex);

        // Escrevendo dados
        printf("Escritor %d está escrevendo\n", id);
        sleep(2);

        sem_post(&rw_mutex);

        sleep(1);
    }
    return NULL;
}

int main() {
    pthread_t readers[3], writers[2];
    int ids[5] = {1, 2, 3, 4, 5};

    sem_init(&rw_mutex, 0, 1);
    sem_init(&mutex, 0, 1);

    // Criando leitores e escritores
    for (int i = 0; i < 3; i++) {
        pthread_create(&readers[i], NULL, reader, &ids[i]);
    }
    for (int i = 0; i < 2; i++) {
        pthread_create(&writers[i], NULL, writer, &ids[i + 3]);
    }

    // Esperando as threads terminarem (nunca neste exemplo)
    for (int i = 0; i < 3; i++) {
        pthread_join(readers[i], NULL);
    }
    for (int i = 0; i < 2; i++) {
        pthread_join(writers[i], NULL);
    }

    sem_destroy(&rw_mutex);
    sem_destroy(&mutex);

    return 0;
}

